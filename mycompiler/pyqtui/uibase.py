"""

Created by: Nathan Starkweather
Created on: 02/02/2014
Created in: PyCharm Community Edition


"""
__author__ = 'Nathan Starkweather'

from snippets.metas import EmptyMethodMeta, OverloadWarning


class DebugControllerMeta(type):
    """ Do debugging things
    """

    def __new__(mcs, name, bases, kwargs):
        """
        @param mcs: metaclass
        @type mcs: type
        @param name: class name
        @type name: str
        @param bases: tuple of bases
        @type bases: tuple
        @param kwargs: namespace
        @type kwargs: dict
        @return: new class
        @rtype: type
        """

        name, bases, kwargs = EmptyMethodMeta(name, bases, kwargs)

        return super().__new__(mcs, name, bases, kwargs)

    def __init__(cls, name, bases, kwargs):
        """
        @param cls: class to modify
        @type cls: type

        Metaclass __init__ is passed the class just like a class
        decorator. It is also passed name, bases, kwargs, which
        makes it a convenient place to do decoration, since access
        to both list of bases and class body namespace.

        Also, keep all metaprogramming centralized
        in the metaclass. Since this is for debugging only, it should
        be easier to turn on and off here, since the class body
        for UiController is autogenerated from uicompiler.py,
        so usage of decorations can be most easily turned off by
        modifying the metaclass (or base class) here.
        """

        OverloadWarning(cls)

        super().__init__(name, bases, kwargs)


class UiControllerBase(metaclass=DebugControllerMeta):
    """ Base class for the UiController. Attach debugging
    decorators and metaclasses to the metaclass.
    """
    pass
